theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score)) +
geom_point(aes(color = factor(mom_hs)), show.legend = TRUE) +
geom_abline(
intercept = c(65, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score)) +
geom_point(aes(color = factor(mom_hs)), show.legend = TRUE) +
geom_abline(
intercept = c(0, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score)) +
geom_point(aes(color = factor(mom_hs)), show.legend = TRUE) +
geom_abline(
intercept = c(0, 5.95), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score)) +
geom_point(aes(color = factor(mom_hs)), show.legend = TRUE) +
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score)) +
geom_point(aes(color = factor(mom_hs)), show.legend = TRUE) +
scale_fill_discrete(labels=c('dropped', 'finished')) +
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score, fill=factor(mom_hs))) +
geom_point() +
scale_fill_discrete(labels=c('dropped', 'finished')) +
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score, fill=mom_hs)) +
d$mom_hs <- as.factor(d$mom_hs)
d$mom_hs <- as.factor(d$mom_hs)
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score, fill=mom_hs) +
geom_point((aes(color = mom_hs), show.legend = TRUE)) +
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score, fill=mom_hs)) +
geom_point((aes(color = mom_hs, show.legend = TRUE))) +
scale_fill_discrete(labels=c('dropped', 'finished')) +
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score, fill=mom_hs)) +
geom_point((aes(color = mom_hs, show.legend = FALSE))) +
scale_fill_discrete(labels=c('dropped', 'finished')) +
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score, fill=mom_hs)) +
geom_point((aes(color = mom_hs))) +
scale_fill_discrete(labels=c('dropped', 'finished')) +
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score)) +
geom_point((aes(color = mom_hs))) +
scale_fill_discrete(labels=c('dropped', 'finished')) +
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score, fill=mom_hs)) +
# geom_point((aes(color = mom_hs))) +
scale_fill_discrete(labels=c('dropped', 'finished')) +
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score, fill=mom_hs)) +
geom_point() +
scale_fill_discrete(labels=c('dropped', 'finished')) +
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score, color=mom_hs)) +
#geom_point(((aes(color = mom_hs)))) +
scale_fill_discrete(labels=c('dropped', 'finished')) +
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score, color=mom_hs)) +
geom_point()+
scale_fill_discrete(labels=c('dropped', 'finished')) +
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score, color=mom_hs)) +
geom_point()+
scale_fill_discrete(labels=c('dropped', 'finished')) +
geom_smooth(method = lm) +
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score, color=mom_hs)) +
geom_point()+
scale_fill_discrete(labels=c('dropped', 'finished')) +
geom_smooth(method = lm, se = FALSE)+
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score, color=mom_hs)) +
geom_point()+
scale_fill_discrete(labels=c('dropped', 'finished')) +
# geom_smooth(method = lm, se = FALSE)+
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score, color=mom_hs)) +
geom_point()+
scale_color_discrete(labels=c('dropped', 'finished')) +
# geom_smooth(method = lm, se = FALSE)+
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score, color=mom_hs)) +
geom_point()+
scale_color_discrete(name = "Education", labels=c('Dropped', 'Finished')) +
# geom_smooth(method = lm, se = FALSE)+
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score, color=mom_hs)) +
geom_point()+
scale_shape_discrete(name = "Education", labels=c('Dropped', 'Finished')) +
# geom_smooth(method = lm, se = FALSE)+
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score, color=mom_hs)) +
geom_point()+
# scale_colour_discrete(name = "Education", labels=c('Dropped', 'Finished')) +
# geom_smooth(method = lm, se = FALSE)+
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score, color=mom_hs)) +
geom_point(aes(color = mom_hs))+
# scale_colour_discrete(name = "Education", labels=c('Dropped', 'Finished')) +
# geom_smooth(method = lm, se = FALSE)+
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score, color=mom_hs)) +
geom_point(aes(color = mom_hs))+
scale_colour_discrete(name = "Education", labels=c('Dropped', 'Finished')) +
# geom_smooth(method = lm, se = FALSE)+
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score, color=mom_hs)) +
geom_point(aes(color = mom_hs, show.legend = FALSE))+
scale_colour_discrete(name = "Education", labels=c('Dropped', 'Finished')) +
# geom_smooth(method = lm, se = FALSE)+
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score, color=mom_hs)) +
geom_point(aes(color = mom_hs, show.legend = TRUE))+
scale_colour_discrete(name = "Education", labels=c('Dropped', 'Finished')) +
# geom_smooth(method = lm, se = FALSE)+
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score)) +
geom_point(aes(color = mom_hs, show.legend = TRUE))+
scale_colour_discrete(name = "Education", labels=c('Dropped', 'Finished')) +
# geom_smooth(method = lm, se = FALSE)+
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score)) +
geom_point(aes(color = mom_hs, show.legend = FALSE))+
scale_colour_discrete(name = "Education", labels=c('Dropped', 'Finished')) +
# geom_smooth(method = lm, se = FALSE)+
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score)) +
geom_point(aes(color = mom_hs, show.legend = FALSE))+
#scale_colour_discrete(name = "Education", labels=c('Dropped', 'Finished')) +
# geom_smooth(method = lm, se = FALSE)+
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
# code to show parallel lines as illustration of no interaction.
ggplot(d, aes(mom_iq, kid_score)) +
geom_point(aes(color = mom_hs, show.legend = FALSE))+
#scale_colour_discrete(name = "Education", labels=c('Dropped', 'Finished')) +
# geom_smooth(method = lm, se = FALSE)+
geom_abline(
intercept = c(-20.59, 11), # different starting places.
slope = c(1, 1),  # both slopes rise at the same rate - no differences
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child Test Score") +
theme_bw()
ggplot(d, aes(mom_iq, kid_score)) +
geom_point(aes(color = factor(mom_hs)), show.legend = TRUE) +
geom_abline(
intercept = c(coef(m4_raw)[1], sum(coef(m4_raw)[1:2])),
slope = c(coef(m4_raw)[4], sum(coef(m4_raw)[4:5])),
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child test Score") +
theme_bw()
ggplot(d, aes(mom_iq, kid_score)) +
geom_point(aes(color = mom_hs), show.legend = TRUE) +
geom_abline(
intercept = c(coef(m4_raw)[1], sum(coef(m4_raw)[1:2])),
slope = c(coef(m4_raw)[4], sum(coef(m4_raw)[4:5])),
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ Score", y = "Child test Score") +
theme_bw()
summary(m2_raw_int <- lm(kid_score ~ mom_hs + mom_iq + mom_hs:mom_iq, d))
colnames(d)
d <- d %>%
mutate(mom_iq_z2 = (mom_iq - mean(mom_iq)) / (2*sd(mom_iq)), # new variable = centred variable divided by the standard deviation of the centred variable
mom_age_z2 = (mom_age - mean(mom_age)) / (2*sd(mom_age))
)
summary(m2_z_int <- lm(kid_score ~ mom_hs + mom_iq_z2 + mom_hs:mom_iq_z2, d))
ggplot(d, aes(mom_iq_z2, kid_score)) +
geom_point(aes(color = factor(mom_hs)), show.legend = FALSE) +
geom_abline(
intercept = c(coef(m2_z_int)[1], sum(coef(m2_z_int)[1:2])),
slope = c(coef(m2_z_int)[4], sum(coef(m2_z_int)[4:5])),
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ score (standardised)", y = "Child test score") +
theme_bw()
# create new variables to store the standardised values
# these are standardised by dividing by 1 x sd:
d <- d %>%
mutate(mom_iq_z2 = (mom_iq - mean(mom_iq)) / (1*sd(mom_iq)), # new variable = centred variable divided by the standard deviation of the centred variable
mom_age_z2 = (mom_age - mean(mom_age)) / (1*sd(mom_age))
)
summary(m2_z_int <- lm(kid_score ~ mom_hs + mom_iq_z2 + mom_hs:mom_iq_z2, d))
ggplot(d, aes(mom_iq_z2, kid_score)) +
geom_point(aes(color = factor(mom_hs)), show.legend = FALSE) +
geom_abline(
intercept = c(coef(m2_z_int)[1], sum(coef(m2_z_int)[1:2])),
slope = c(coef(m2_z_int)[4], sum(coef(m2_z_int)[4:5])),
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ score (standardised)", y = "Child test score") +
theme_bw()
summary(d$mom_hs)
d$mom_hs_c <- d$mom_hs - mean(d$mom_hs) # mean centring mom_hs
d$mom_hs_c <- ifelse(d$mom_hs == "1", 1, 0)
View(d)
# mean centring mom_hs
d$mom_hs_c <- d$mom_hs - mean(d$mom_hs)
# mean centring mom_hs
d$mom_hs_c <- d$mom_hs_c - mean(d$mom_hs_c)
# mean centre mom_iq and save it to a new variable
d$mom_iq_c <- d$mom_iq - mean(d$mom_iq)
summary(m2_c_Int <- lm(kid_score ~ mom_hs_c + mom_iq_c + mom_hs_c:mom_iq_c, d))
knitr::opts_chunk$set(warning = TRUE)
knitr::opts_chunk$set(message = TRUE)
library(tidyverse)
d <- read_csv("data/Wk3/_Lecture 3 Materials/KidIQ.txt", col_types = cols(mom_work = col_skip()))
summary(m2_raw <- lm(kid_score ~ mom_hs + mom_iq, d))
summary(m2_raw_int <- lm(kid_score ~ mom_hs + mom_iq + mom_hs:mom_iq, d))
d$mom_hs_c <- ifelse(d$mom_hs == "1", 1, 0)
# mean centring mom_hs
d$mom_hs_c <- d$mom_hs_c - mean(d$mom_hs_c)
# mean centre mom_iq and save it to a new variable
d$mom_iq_c <- d$mom_iq - mean(d$mom_iq)
summary(m2_c_Int <- lm(kid_score ~ mom_hs_c + mom_iq_c + mom_hs_c:mom_iq_c, d))
summary(m2_c_Int <- lm(kid_score ~ mom_hs_c + mom_iq_c + mom_hs_c:mom_iq_c, d))
ggplot(d, aes(mom_iq_c, kid_score)) +
geom_point(aes(color = factor(mom_hs_c)), show.legend = FALSE) +
geom_abline(
intercept = c(coef(m2_c_int)[1], sum(coef(m2_c_int)[1:2])),
slope = c(coef(m2_c_int)[4], sum(coef(m2_c_int)[4:5])),
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ score (centred)", y = "Child test score") +
theme_bw()
ggplot(d, aes(mom_iq_c, kid_score)) +
geom_point(aes(color = factor(mom_hs_c)), show.legend = FALSE) +
geom_abline(
intercept = c(coef(m2_c_Int)[1], sum(coef(m2_c_Int)[1:2])),
slope = c(coef(m2_c_Int)[4], sum(coef(m2_c_Int)[4:5])),
color = c("black", "grey")) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Mother IQ score (centred)", y = "Child test score") +
theme_bw()
summary(d$mom_hs_c)
87.63892 + (2.84076*0.7857) + (0.58839*1) + -0.48427*(-0.7857*1)
87.63892 + (2.84076*-0.7857) + (0.58839*1) + -0.48427*(-0.7857*1)
87.63892 + (2.84076*0.2143) + (0.58839*1) + -0.48427*(0.2143*1)
87.63892 + (2.84076*-0.7857) + (0.58839*10) + -0.48427*(-0.7857*10)
87.63892 + (2.84076*0.2143) + (0.58839*10) + -0.48427*(0.2143*10)
87.63892 + (2.84076*-0.7857) + (0.58839*20) + -0.48427*(-0.7857*20)
87.63892 + (2.84076*0.2143) + (0.58839*20) + -0.48427*(0.2143*20)
87.63892 + (2.84076*-0.7857) + (0.58839*-20) + -0.48427*(-0.7857*-20)
87.63892 + (2.84076*0.2143) + (0.58839*-20) + -0.48427*(0.2143*-20)
95.09574 - 93.0938
104.7846 - 97.93991
78.55548 - 66.02932
knitr::opts_chunk$set(include = TRUE)
library(tidyverse)
library(effects)
library(broom)
library(gridExtra)
library(PerformanceAnalytics)
d <- read_csv("data/Wk3/_Lecture 3 Materials/KidIQ.txt", col_types = cols(mom_work = col_skip()))
summary(d)
knitr::opts_chunk$set(warning = TRUE)
knitr::opts_chunk$set(message = TRUE)
library(tidyverse)
knitr::opts_chunk$set(warning = TRUE)
knitr::opts_chunk$set(message = TRUE)
rm(list=ls())
knitr::opts_chunk$set(include = TRUE)
library(tidyverse)
library(effects)
library(broom)
library(gridExtra)
library(PerformanceAnalytics)
d$mom_hs <- as.factor(d$mom_hs)
knitr::opts_chunk$set(warning = TRUE)
knitr::opts_chunk$set(message = TRUE)
rm(list=ls())
knitr::opts_chunk$set(include = TRUE)
library(tidyverse)
library(effects)
library(broom)
library(gridExtra)
library(PerformanceAnalytics)
d <- read_csv("data/Wk3/_Lecture 3 Materials/KidIQ.txt", col_types = cols(mom_work = col_skip()))
summary(d)
d$mom_hs <- as.factor(d$mom_hs)
summary(d)
# bar charts for categorical variables
p_hs <- ggplot(d, aes(x = mom_hs, fill = mom_hs)) + geom_bar() + theme_classic()
# (so called) continuous variables
p_score <- ggplot(d, aes(x = kid_score)) + geom_histogram()+ theme_classic()
p_iq <- ggplot(d, aes(x = mom_iq)) + geom_histogram()+ theme_classic()
p_age <- ggplot(d, aes(mom_age)) + geom_histogram()+ theme_classic()
grid.arrange(p_score, p_hs, p_iq, p_age)
table(d$mom_hs)
# make mom_hs a numeric variable
d$mom_hs_c <- ifelse(mom_hs == "1", 1, 0)
# make mom_hs a numeric variable
d$mom_hs_c <- ifelse(d$mom_hs == "1", 1, 0)
summary(d$mom_hs_c)
# now complete the rescaling by taking the mean away from every observation
d$mom_hs_c <- d$mom_hs_c - mean(d$mom_hs_c)
summary(d$mom_hs)
summary(d$mom_hs_c)
d$mom_iq_c <- d$mom_iq - mean(d$mom_iq)
d$mom_age_c <- d$mom_age - mean(d$mom_age)
mean(d$kid_score)
summary(m0 <- lm(kid_score ~ 1, d))
summary(m1_c <- lm(kid_score ~ 1 + mom_iq_c, d))
aov(m0, m1_c)
anova(m0, m1_c)
summary(anova(m0, m1_c))
anova(m0, m1_c)
(anova(m0, m1_c))
summary(m2_c <- lm(kid_score ~ 1 + mom_iq_c + mom_age_c, d))
anova(m1_c, m2_c)
summary(m2_c <- lm(kid_score ~ 1 + mom_iq_c + mom_hs_c, d))
anova(m1_c, m2_c)
summary(m2_c)
summary(m3_c_int <- lm(kid_score ~ 1 + mom_iq_c + mom_hs_c + mom_iq_c:mom_hs_c, d))
anova(m2_c, m3_c_int)
summary(m3_c_int)

A = [1 0 0]
A = c(1 0 0)
A = c(1, 0, 0)
B = c(0, 0, 1)
w = .5
C = A*(1-w) + w * B
C
A = c(1, 0, 0)
B = c(0, 0, 1)
w = 1
C = A*(1-w) + w * B
C
A = c(1, 0, 0)
B = c(0, 0, 1)
w = .75
C = A*(1-w) + w * B
C
outer(B, A)
A %*% B
outer(A, B)
A %*% B
M = outer(B, A)
M %*% A
library(pracma)
A
A/Norm(A)
A <- A/Norm(A)
A
length(A)
# Cohen's d effect size for O vs. A
cohens_d(lab3_data$Score[lab3_data$Group == "O"],lab3_data$Score[lab3_data$Group == "A"])
library(tidyverse) # allows pipes, arrang(), summary(), aov(), etc
library(rstatix) # allows group_by()
library(effectsize) # a neat little package that provides the effect size
library(ggpubr) # allows us to examine QQ Plots
setwd("C:/Users/Admin/Documents")
library(deSolve)
library(deSolve)
# Define oscillator parameters
A <- 1        # Amplitude of stimulus-driven oscillation
omega <- 2    # Angular frequency of oscillation
gamma <- 0.1  # Damping coefficient
num_oscillators <- 5  # Number of oscillators
# Define the system of differential equations
oscillator_model <- function(time, state, parameters) {
d_state <- numeric(length(state))
# Loop through each oscillator
for (i in 1:num_oscillators) {
# State variables for oscillator i
x <- state[(i - 1) * 2 + 1]
v <- state[(i - 1) * 2 + 2]
# External driving stimulus (e.g., a simple sine function varying with time)
stimulus <- A * sin(omega * time)
# Differential equations for position (x) and velocity (v)
d_state[(i - 1) * 2 + 1] <- v
d_state[(i - 1) * 2 + 2] <- -2 * gamma * v - omega^2 * x + stimulus
}
list(d_state)
}
# Initial state: each oscillator starts at rest
initial_state <- rep(0, num_oscillators * 2)
# Simulation time
time <- seq(0, 10, by = 0.1)
# Run the simulation
output <- ode(y = initial_state, times = time, func = oscillator_model, parms = NULL)
# Plot the result
plot(time, output[, 2], type = "l", xlab = "Time", ylab = "Oscillator Activity", col = "blue",
main = "Oscillator Responses to Stimulus Sequence")
for (i in 2:num_oscillators) {
lines(time, output[, (i - 1) * 2 + 2], col = i)
}
stimulus
stimulus <- A * sin(omega * time)
stimulus
# Load pracma library for ode45 solver
library(pracma)
# Load pracma library for ode45 solver
library(pracma)
# Define parameters (adjust as per the equations in the PDF)
omega <- 2 * pi * 1.0  # example frequency parameter
beta <- 0.1            # damping coefficient
stim_strength <- 0.5   # external stimulus strength
# Define external stimulus function
stimulus <- function(t) {
stim_strength * ifelse(sin(2 * pi * 2.0 * t) > 0, 1, 0)  # pulse at frequency 2 Hz
}
# Define the system of differential equations (based on Equations (1) and (2))
oscillator_eq <- function(t, z) {
x <- z[1]
y <- z[2]
dxdt <- y
dydt <- -omega^2 * x - 2 * beta * y + stimulus(t)
list(c(dxdt, dydt))
}
# Initial conditions
z0 <- c(0, 0)  # initial values for x and y
# Time span for simulation
time <- seq(0, 10, length.out = 1000)
# Solve differential equations using ode45 from pracma
result <- ode45(oscillator_eq, time, z0)
# Define parameters (adjust as per the equations in the PDF)
omega <- 2 * pi * 1.0  # example frequency parameter
beta <- 0.1            # damping coefficient
stim_strength <- 0.5   # external stimulus strength
# Define external stimulus function
stimulus <- function(t) {
stim_strength * ifelse(sin(2 * pi * 2.0 * t) > 0, 1, 0)  # pulse at frequency 2 Hz
}
# Define the system of differential equations (based on Equations (1) and (2))
oscillator_eq <- function(t, z) {
x <- z[1]
y <- z[2]
dxdt <- y
dydt <- -omega^2 * x - 2 * beta * y + stimulus(t)
list(c(dxdt, dydt))
}
# Initial conditions
z0 <- c(0, 0)  # initial values for x and y
# Time span for simulation
time <- seq(0, 10, length.out = 1000)
# Solve differential equations using ode45 from pracma
result <- ode45(oscillator_eq, time, z0)
omega <- 2 * pi * 1.0  # example frequency parameter
beta <- 0.1            # damping coefficient
stim_strength <- 0.5   # external stimulus strength
# Define external stimulus function
stimulus <- function(t) {
stim_strength * ifelse(sin(2 * pi * 2.0 * t) > 0, 1, 0)  # pulse at frequency 2 Hz
}
# Define the system of differential equations (based on Equations (1) and (2))
oscillator_eq <- function(t, z) {
x <- z[1]
y <- z[2]
dxdt <- y
dydt <- -omega^2 * x - 2 * beta * y + stimulus(t)
list(c(dxdt, dydt))
}
# Initial conditions
y0 <- c(0, 0)  # initial values for x and y
# Time span for simulation
time <- seq(0, 10, length.out = 1000)
# Solve differential equations using ode45 from pracma
result <- ode45(oscillator_eq, time, y0)
omega <- 2 * pi * 1.0  # example frequency parameter
beta <- 0.1            # damping coefficient
stim_strength <- 0.5   # external stimulus strength
# Define external stimulus function
stimulus <- function(t) {
stim_strength * ifelse(sin(2 * pi * 2.0 * t) > 0, 1, 0)  # pulse at frequency 2 Hz
}
# Define the system of differential equations (based on Equations (1) and (2))
oscillator_eq <- function(t, z) {
x <- z[1]
y <- z[2]
dxdt <- y
dydt <- -omega^2 * x - 2 * beta * y + stimulus(t)
list(c(dxdt, dydt))
}
# Initial conditions
y0 <- c(0, 0)  # initial values for x and y
# Time span for simulation
time <- seq(0, 10, length.out = 1000)
# Solve differential equations using ode45 from pracma
result <- ode45(oscillator_eq, time, y0)
omega <- 2 * pi * 1.0  # example frequency parameter
beta <- 0.1            # damping coefficient
stim_strength <- 0.5   # external stimulus strength
# Define external stimulus function
stimulus <- function(t) {
stim_strength * ifelse(sin(2 * pi * 2.0 * t) > 0, 1, 0)  # pulse at frequency 2 Hz
}
# Define the system of differential equations (based on Equations (1) and (2))
oscillator_eq <- function(t, z) {
x <- z[1]
y <- z[2]
dxdt <- y
dydt <- -omega^2 * x - 2 * beta * y + stimulus(t)
list(c(dxdt, dydt))
}
# Initial conditions
y0 <- c(0, 0)  # initial values for x and y
# Time span for simulation
time <- seq(0, 10, length.out = 1000)
# Solve differential equations using ode45 from pracma
result <- ode45(oscillator_eq, time, y0)
omega <- 2 * pi * 1.0  # example frequency parameter
beta <- 0.1            # damping coefficient
stim_strength <- 0.5   # external stimulus strength
# Define external stimulus function
stimulus <- function(t) {
stim_strength * ifelse(sin(2 * pi * 2.0 * t) > 0, 1, 0)  # pulse at frequency 2 Hz
}
# Define the system of differential equations (based on Equations (1) and (2))
oscillator_eq <- function(t, z) {
x <- z[1]
y <- z[2]
dxdt <- y
dydt <- -omega^2 * x - 2 * beta * y + stimulus(t)
list(c(dxdt, dydt))
}
# Initial conditions
y0 <- c(0, 0)  # initial values for x and y
# Time span for simulation
time <- seq(0, 10, length.out = 1000)
# Solve differential equations using ode45 from pracma
result <- ode45(oscillator_eq, time, y0)
omega <- 2 * pi * 1.0  # example frequency parameter
beta <- 0.1            # damping coefficient
stim_strength <- 0.5   # external stimulus strength
# Define external stimulus function
stimulus <- function(t) {
stim_strength * ifelse(sin(2 * pi * 2.0 * t) > 0, 1, 0)  # pulse at frequency 2 Hz
}
# Define the system of differential equations (based on Equations (1) and (2))
oscillator_eq <- function(t, z) {
x <- z[1]
y <- z[2]
dxdt <- y
dydt <- -omega^2 * x - 2 * beta * y + stimulus(t)
list(c(dxdt, dydt))
}
# Initial conditions
y0 <- c(0, 0)  # initial values for x and y
# Time span for simulation
time <- seq(0, 10, length.out = 1000)
# Solve differential equations using ode45 from pracma
result <- ode45(oscillator_eq, time, y0)
omega <- 2 * pi * 1.0  # example frequency parameter
beta <- 0.1            # damping coefficient
stim_strength <- 0.5   # external stimulus strength
# Define external stimulus function
stimulus <- function(t) {
stim_strength * ifelse(sin(2 * pi * 2.0 * t) > 0, 1, 0)  # pulse at frequency 2 Hz
}
# Define the system of differential equations (based on Equations (1) and (2))
oscillator_eq <- function(t, z) {
x <- z[1]
y <- z[2]
dxdt <- y
dydt <- -omega^2 * x - 2 * beta * y + stimulus(t)
list(c(dxdt, dydt))
}
# Initial conditions
y0 <- c(0, 0)  # initial values for x and y
# Time span for simulation
time <- seq(0, 10, length.out = 1000)
# Solve differential equations using ode45 from pracma
result <- ode45(oscillator_eq, time, y0)
library(pracma)
omega <- 2 * pi * 1.0  # example frequency parameter
beta <- 0.1            # damping coefficient
stim_strength <- 0.5   # external stimulus strength
# Define external stimulus function
stimulus <- function(t) {
stim_strength * ifelse(sin(2 * pi * 2.0 * t) > 0, 1, 0)  # pulse at frequency 2 Hz
}
# Define the system of differential equations (based on Equations (1) and (2))
oscillator_eq <- function(t, z) {
x <- z[1]
y <- z[2]
dxdt <- y
dydt <- -omega^2 * x - 2 * beta * y + stimulus(t)
list(c(dxdt, dydt))
}
# Initial conditions
y0 <- c(0, 0)  # initial values for x and y
# Time span for simulation
time <- seq(0, 10, length.out = 1000)
# Solve differential equations using ode45 from pracma
result <- ode45(oscillator_eq, time, y0)
stimulus <- function(t) {
stim_strength * ifelse(sin(2 * pi * 2.0 * t) > 0, 1, 0)  # pulse at frequency 2 Hz
}
stimulus
oscillator_eq <- function(t, z) {
x <- z[1]
y <- z[2]
oscillator_eq <- function(t, z) {
x <- z[1]
y <- z[2]
omega <- 2 * pi * 1.0  # example frequency parameter
beta <- 0.1            # damping coefficient
stim_strength <- 0.5   # external stimulus strength
# Define external stimulus function
stimulus <- function(t) {
stim_strength * ifelse(sin(2 * pi * 2.0 * t) > 0, 1, 0)  # pulse at frequency 2 Hz
}
# Define the system of differential equations (based on Equations (1) and (2))
oscillator_eq <- function(t, y) {
x <- y[1]
v <- y[2]  # dx/dt, analogous to velocity
dxdt <- v
dvdt <- -omega^2 * x - 2 * beta * v + stimulus(t)
return(list(c(dxdt, dvdt)))
}
# Initial conditions
y0 <- c(0, 0)  # initial values for x and dx/dt
# Time span for simulation
time <- seq(0, 10, length.out = 1000)
# Solve differential equations using ode45 from pracma
result <- ode45(f = oscillator_eq, tspan = time, y0 = y0)
# Plotting the results
plot(result$x, result$y[, 1], type = "l", col = "blue", xlab = "Time", ylab = "Amplitude",
main = "Oscillator Response to External Stimulus")
lines(result$x, result$y[, 2], col = "red")
legend("topright", legend = c("x(t)", "y(t)"), col = c("blue", "red"), lty = 1)
Define parameters (adjust as per the equations in the PDF)
omega <- 2 * pi * 1.0  # example frequency parameter
beta <- 0.1            # damping coefficient
stim_strength <- 0.5   # external stimulus strength
# Define external stimulus function
stimulus <- function(t) {
stim_strength * ifelse(sin(2 * pi * 2.0 * t) > 0, 1, 0)  # pulse at frequency 2 Hz
}
oscillator_eq <- function(t, y) {
x <- y[1]
v <- y[2]  # dx/dt, analogous to velocity
dxdt <- v
dvdt <- -omega^2 * x - 2 * beta * v + stimulus(t)
return(list(c(dxdt, dvdt)))
}
y0 <- c(0, 0)  # initial values for x and dx/dt
time <- seq(0, 10, length.out = 1000)
# Solve differential equations using ode45 from pracma
result <- ode45(f = oscillator_eq, tspan = time, y0 = y0)
# Define parameters (adjust as per the equations in the PDF)
omega <- 2 * pi * 1.0  # example frequency parameter
beta <- 0.1            # damping coefficient
stim_strength <- 0.5   # external stimulus strength
# Define external stimulus function
stimulus <- function(t) {
stim_strength * ifelse(sin(2 * pi * 2.0 * t) > 0, 1, 0)  # pulse at frequency 2 Hz
}
# Define the system of differential equations (based on Equations (1) and (2))
oscillator_eq <- function(t, y) {
x <- y[1]
v <- y[2]  # dx/dt, analogous to velocity
dxdt <- v
dvdt <- -omega^2 * x - 2 * beta * v + stimulus(t)
return(list(c(dxdt, dvdt)))
}
# Initial conditions
y0 <- c(0, 0)  # initial values for x and dx/dt
# Time span for simulation
t0 <- 0                      # Start time
tf <- 10                     # End time
time_points <- seq(t0, tf, length.out = 1000)
# Solve differential equations using ode45 from pracma
result <- ode45(f = oscillator_eq, t0 = t0, tf = tf, y0 = y0)
omega <- 2 * pi * 1.0  # example frequency parameter
beta <- 0.1            # damping coefficient
stim_strength <- 0.5   # external stimulus strength
# Define external stimulus function
stimulus <- function(t) {
stim_strength * ifelse(sin(2 * pi * 2.0 * t) > 0, 1, 0)  # pulse at frequency 2 Hz
}
# Define the system of differential equations (based on Equations (1) and (2))
oscillator_eq <- function(t, y) {
x <- y[1]
v <- y[2]  # dx/dt, analogous to velocity
dxdt <- v
dvdt <- -omega^2 * x - 2 * beta * v + stimulus(t)
return(list(c(dxdt, dvdt)))
}
# Initial conditions
y0 <- c(0, 0)  # initial values for x and dx/dt
# Time span for simulation
t0 <- 0                      # Start time
tf <- 10                     # End time
# Solve differential equations using ode45 from pracma
result <- ode45(f = oscillator_eq, t0 = t0, tf = tf, y0 = y0)
# Load the deSolve library for solving ODEs
library(deSolve)
omega <- 2 * pi * 1.0  # Frequency parameter
beta <- 0.1            # Damping coefficient
stim_strength <- 0.5   # External stimulus strength
# Define external stimulus function
stimulus <- function(t) {
stim_strength * ifelse(sin(2 * pi * 2.0 * t) > 0, 1, 0)  # Pulse at frequency 2 Hz
}
# Define the system of differential equations
oscillator_eq <- function(t, y, parms) {
x <- y[1]
v <- y[2]  # dx/dt, analogous to velocity
dxdt <- v
dvdt <- -omega^2 * x - 2 * beta * v + stimulus(t)
list(c(dxdt, dvdt))
}
# Initial conditions
y0 <- c(x = 0, v = 0)  # initial values for x and dx/dt
# Time span for simulation
time <- seq(0, 10, length.out = 1000)
# Solve differential equations using ode from deSolve
result <- ode(y = y0, times = time, func = oscillator_eq, parms = NULL)
# Plotting the results
plot(result[, "time"], result[, "x"], type = "l", col = "blue", xlab = "Time", ylab = "Amplitude",
main = "Oscillator Response to External Stimulus")
lines(result[, "time"], result[, "v"], col = "red")
legend("topright", legend = c("x(t)", "y(t)"), col = c("blue", "red"), lty = 1)
stimulus
stim_strength * ifelse(sin(2 * pi * 2.0 * t) > 0, 1, 0)
stim_strength
omega <- 2 * pi * 1.0  # Frequency parameter
beta <- 0.1            # Damping coefficient
stim_strength <- 0.5   # External stimulus strength
pulse_duration <- 0.2  # Duration of each square wave pulse
# Define external stimulus function for a sequence of 5 items
stimulus_sequence <- function(t) {
# Each item is presented at a specified time with a square pulse
presentation_times <- c(1, 2, 3, 4, 5)  # Times at which each stimulus item appears
# Generate square pulses at each presentation time
stimulus <- 0
for (start_time in presentation_times) {
if (t >= start_time && t < start_time + pulse_duration) {
stimulus <- stim_strength
}
}
return(stimulus)
}
stimulus()
omega <- 2 * pi * 1.0  # Frequency parameter
beta <- 0.1            # Damping coefficient
stim_strength <- 0.5   # External stimulus strength
pulse_duration <- 0.2  # Duration of each square wave pulse
# Define external stimulus function for a sequence of 5 items
stimulus_sequence <- function(t) {
# Each item is presented at a specified time with a square pulse
presentation_times <- c(1, 2, 3, 4, 5)  # Times at which each stimulus item appears
# Generate square pulses at each presentation time
stimulus <- 0
for (start_time in presentation_times) {
if (t >= start_time && t < start_time + pulse_duration) {
stimulus <- stim_strength
}
}
return(stimulus)
}
# Define the system of differential equations
oscillator_eq <- function(t, y, parms) {
x <- y[1]
v <- y[2]  # dx/dt, analogous to velocity
dxdt <- v
dvdt <- -omega^2 * x - 2 * beta * v + stimulus_sequence(t)
list(c(dxdt, dvdt))
}
# Initial conditions
y0 <- c(x = 0, v = 0)  # initial values for x and dx/dt
# Time span for simulation
time <- seq(0, 10, length.out = 1000)
# Solve differential equations using ode from deSolve
result <- ode(y = y0, times = time, func = oscillator_eq, parms = NULL)
# Plotting the results
plot(result[, "time"], result[, "x"], type = "l", col = "blue", xlab = "Time", ylab = "Amplitude",
main = "Oscillator Response to Sequence of Stimuli")
lines(result[, "time"], result[, "v"], col = "red")
legend("topright", legend = c("x(t)", "y(t)"), col = c("blue", "red"), lty = 1)
